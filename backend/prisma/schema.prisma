model Payment {
   id           Int         @id @default(autoincrement())
   paySlipId    Int
   amount       Float
   mode         PaymentMode
   reference    String?
   notes        String?
   receiptNumber String?     @unique
   date         DateTime     @default(now())
   receiptUrl   String?
   paySlip      PaySlip      @relation(fields: [paySlipId], references: [id])
 }

enum PaymentMode {
  ESPECES
  VIREMENT
  ORANGE_MONEY
  WAVE
  FREE_MONEY
}

enum PeriodType {
  MENSUEL
  HEBDO
  JOURNALIER
}

model Employee {
    id           Int      @id @default(autoincrement())
    fullName     String
    position     String
    contractType ContractType
    salary       Float
    bankDetails  String?
    companyId    Int
    company      Company  @relation(fields: [companyId], references: [id])
    isActive     Boolean  @default(true)
    qrCode       String?  @unique
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    paySlips     PaySlip[]
    attendances  Attendance[]
}

enum ContractType {
  JOURNALIER
  FIXE
  HONORAIRE
}
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
    id        Int      @id @default(autoincrement())
    email     String   @unique
    password  String
    role      Role     @default(USER)
    companyId Int?
    company   Company? @relation(fields: [companyId], references: [id])
    isActive  Boolean  @default(true)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Company {
  id               Int      @id @default(autoincrement())
  name             String
  logo             String?
  color            String   @default("#3b82f6")
  address          String?
  currency         String  @default("FCFA")
  period           PeriodType @default(MENSUEL)
  isActive         Boolean  @default(true)
  invitedSuperAdmins String[] // Array of super admin emails who are invited
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  users            User[]
  employees        Employee[]
  payRuns          PayRun[]
}

enum Role {
  SUPER_ADMIN
  ADMIN
  CASHIER
  USER
}

enum PayRunStatus {
  DRAFT
  APPROVED
  CLOSED
}

enum PaySlipStatus {
  PENDING
  APPROVED
  PARTIAL
  PAID
}

model PayRun {
  id          Int      @id @default(autoincrement())
  name        String
  companyId   Int
  company     Company  @relation(fields: [companyId], references: [id])
  startDate   DateTime
  endDate     DateTime
  periodType  PeriodType
  status      PayRunStatus @default(DRAFT)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  paySlips    PaySlip[]
}

model PaySlip {
  id          Int      @id @default(autoincrement())
  payRunId    Int
  payRun      PayRun   @relation(fields: [payRunId], references: [id])
  employeeId  Int
  employee    Employee @relation(fields: [employeeId], references: [id])
  grossSalary Float
  deductions  Float    @default(0)
  netSalary   Float
  daysWorked  Int?
  hoursWorked Float?
  status      PaySlipStatus @default(PENDING)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  payments    Payment[]
}

enum AttendanceStatus {
  PRESENT
  LATE
  ABSENT
  EXCUSED
}

model Attendance {
  id          Int               @id @default(autoincrement())
  employeeId  Int
  employee    Employee          @relation(fields: [employeeId], references: [id])
  date        DateTime          @db.Date
  checkInTime DateTime
  checkOutTime DateTime?
  status      AttendanceStatus  @default(PRESENT)
  notes       String?
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt

  @@unique([employeeId, date])
}
